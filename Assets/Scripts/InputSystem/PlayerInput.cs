//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Scripts/InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Scripts/InputSystem/PlayerInput.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerInputMap_EXPLORATION"",
            ""id"": ""46bde89f-f890-44a7-b7fb-a00cf8f9f768"",
            ""actions"": [
                {
                    ""name"": ""MovementInput"",
                    ""type"": ""Value"",
                    ""id"": ""73a0006e-85f9-480b-812f-9dc905472ea9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MenuInput"",
                    ""type"": ""Button"",
                    ""id"": ""5f6cc1f6-dc8b-49d1-968e-6be54777994c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""5480dabb-40e3-456e-90d0-79dd0170b0cc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractSwitch"",
                    ""type"": ""Value"",
                    ""id"": ""35355d72-3b82-4055-b27d-3df29bf4aa1f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""2486f187-dd01-4eea-85ca-3f452a61df6a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7cf05436-7506-4502-a9d7-b6f261486f56"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""381ee9b1-da64-4c89-a1ce-b23b0990565e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""05dc7187-db63-4c06-b26d-421243eea881"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a3f454ee-9dae-4149-abbf-7d3df3ea1666"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""daff7f97-aacd-433f-b50e-b1c7602caa40"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82699276-d836-4455-8353-6aaae265bb70"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9d504ab-4262-485a-81e5-bbe094fde61e"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerInputMap_COMBAT"",
            ""id"": ""f4f74810-eeab-42c2-b6b0-9c819f9627e8"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""PlayerInputMap_ALCHEMY"",
            ""id"": ""1337884c-2186-4c54-a580-7ade57337242"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerInputMap_EXPLORATION
        m_PlayerInputMap_EXPLORATION = asset.FindActionMap("PlayerInputMap_EXPLORATION", throwIfNotFound: true);
        m_PlayerInputMap_EXPLORATION_MovementInput = m_PlayerInputMap_EXPLORATION.FindAction("MovementInput", throwIfNotFound: true);
        m_PlayerInputMap_EXPLORATION_MenuInput = m_PlayerInputMap_EXPLORATION.FindAction("MenuInput", throwIfNotFound: true);
        m_PlayerInputMap_EXPLORATION_Interact = m_PlayerInputMap_EXPLORATION.FindAction("Interact", throwIfNotFound: true);
        m_PlayerInputMap_EXPLORATION_InteractSwitch = m_PlayerInputMap_EXPLORATION.FindAction("InteractSwitch", throwIfNotFound: true);
        // PlayerInputMap_COMBAT
        m_PlayerInputMap_COMBAT = asset.FindActionMap("PlayerInputMap_COMBAT", throwIfNotFound: true);
        // PlayerInputMap_ALCHEMY
        m_PlayerInputMap_ALCHEMY = asset.FindActionMap("PlayerInputMap_ALCHEMY", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_PlayerInputMap_EXPLORATION.enabled, "This will cause a leak and performance issues, PlayerInput.PlayerInputMap_EXPLORATION.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PlayerInputMap_COMBAT.enabled, "This will cause a leak and performance issues, PlayerInput.PlayerInputMap_COMBAT.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PlayerInputMap_ALCHEMY.enabled, "This will cause a leak and performance issues, PlayerInput.PlayerInputMap_ALCHEMY.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInputMap_EXPLORATION
    private readonly InputActionMap m_PlayerInputMap_EXPLORATION;
    private List<IPlayerInputMap_EXPLORATIONActions> m_PlayerInputMap_EXPLORATIONActionsCallbackInterfaces = new List<IPlayerInputMap_EXPLORATIONActions>();
    private readonly InputAction m_PlayerInputMap_EXPLORATION_MovementInput;
    private readonly InputAction m_PlayerInputMap_EXPLORATION_MenuInput;
    private readonly InputAction m_PlayerInputMap_EXPLORATION_Interact;
    private readonly InputAction m_PlayerInputMap_EXPLORATION_InteractSwitch;
    /// <summary>
    /// Provides access to input actions defined in input action map "PlayerInputMap_EXPLORATION".
    /// </summary>
    public struct PlayerInputMap_EXPLORATIONActions
    {
        private @PlayerInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PlayerInputMap_EXPLORATIONActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "PlayerInputMap_EXPLORATION/MovementInput".
        /// </summary>
        public InputAction @MovementInput => m_Wrapper.m_PlayerInputMap_EXPLORATION_MovementInput;
        /// <summary>
        /// Provides access to the underlying input action "PlayerInputMap_EXPLORATION/MenuInput".
        /// </summary>
        public InputAction @MenuInput => m_Wrapper.m_PlayerInputMap_EXPLORATION_MenuInput;
        /// <summary>
        /// Provides access to the underlying input action "PlayerInputMap_EXPLORATION/Interact".
        /// </summary>
        public InputAction @Interact => m_Wrapper.m_PlayerInputMap_EXPLORATION_Interact;
        /// <summary>
        /// Provides access to the underlying input action "PlayerInputMap_EXPLORATION/InteractSwitch".
        /// </summary>
        public InputAction @InteractSwitch => m_Wrapper.m_PlayerInputMap_EXPLORATION_InteractSwitch;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputMap_EXPLORATION; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PlayerInputMap_EXPLORATIONActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PlayerInputMap_EXPLORATIONActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PlayerInputMap_EXPLORATIONActions" />
        public void AddCallbacks(IPlayerInputMap_EXPLORATIONActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputMap_EXPLORATIONActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputMap_EXPLORATIONActionsCallbackInterfaces.Add(instance);
            @MovementInput.started += instance.OnMovementInput;
            @MovementInput.performed += instance.OnMovementInput;
            @MovementInput.canceled += instance.OnMovementInput;
            @MenuInput.started += instance.OnMenuInput;
            @MenuInput.performed += instance.OnMenuInput;
            @MenuInput.canceled += instance.OnMenuInput;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @InteractSwitch.started += instance.OnInteractSwitch;
            @InteractSwitch.performed += instance.OnInteractSwitch;
            @InteractSwitch.canceled += instance.OnInteractSwitch;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PlayerInputMap_EXPLORATIONActions" />
        private void UnregisterCallbacks(IPlayerInputMap_EXPLORATIONActions instance)
        {
            @MovementInput.started -= instance.OnMovementInput;
            @MovementInput.performed -= instance.OnMovementInput;
            @MovementInput.canceled -= instance.OnMovementInput;
            @MenuInput.started -= instance.OnMenuInput;
            @MenuInput.performed -= instance.OnMenuInput;
            @MenuInput.canceled -= instance.OnMenuInput;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @InteractSwitch.started -= instance.OnInteractSwitch;
            @InteractSwitch.performed -= instance.OnInteractSwitch;
            @InteractSwitch.canceled -= instance.OnInteractSwitch;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerInputMap_EXPLORATIONActions.UnregisterCallbacks(IPlayerInputMap_EXPLORATIONActions)" />.
        /// </summary>
        /// <seealso cref="PlayerInputMap_EXPLORATIONActions.UnregisterCallbacks(IPlayerInputMap_EXPLORATIONActions)" />
        public void RemoveCallbacks(IPlayerInputMap_EXPLORATIONActions instance)
        {
            if (m_Wrapper.m_PlayerInputMap_EXPLORATIONActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PlayerInputMap_EXPLORATIONActions.AddCallbacks(IPlayerInputMap_EXPLORATIONActions)" />
        /// <seealso cref="PlayerInputMap_EXPLORATIONActions.RemoveCallbacks(IPlayerInputMap_EXPLORATIONActions)" />
        /// <seealso cref="PlayerInputMap_EXPLORATIONActions.UnregisterCallbacks(IPlayerInputMap_EXPLORATIONActions)" />
        public void SetCallbacks(IPlayerInputMap_EXPLORATIONActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputMap_EXPLORATIONActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputMap_EXPLORATIONActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PlayerInputMap_EXPLORATIONActions" /> instance referencing this action map.
    /// </summary>
    public PlayerInputMap_EXPLORATIONActions @PlayerInputMap_EXPLORATION => new PlayerInputMap_EXPLORATIONActions(this);

    // PlayerInputMap_COMBAT
    private readonly InputActionMap m_PlayerInputMap_COMBAT;
    private List<IPlayerInputMap_COMBATActions> m_PlayerInputMap_COMBATActionsCallbackInterfaces = new List<IPlayerInputMap_COMBATActions>();
    /// <summary>
    /// Provides access to input actions defined in input action map "PlayerInputMap_COMBAT".
    /// </summary>
    public struct PlayerInputMap_COMBATActions
    {
        private @PlayerInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PlayerInputMap_COMBATActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputMap_COMBAT; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PlayerInputMap_COMBATActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PlayerInputMap_COMBATActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PlayerInputMap_COMBATActions" />
        public void AddCallbacks(IPlayerInputMap_COMBATActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputMap_COMBATActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputMap_COMBATActionsCallbackInterfaces.Add(instance);
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PlayerInputMap_COMBATActions" />
        private void UnregisterCallbacks(IPlayerInputMap_COMBATActions instance)
        {
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerInputMap_COMBATActions.UnregisterCallbacks(IPlayerInputMap_COMBATActions)" />.
        /// </summary>
        /// <seealso cref="PlayerInputMap_COMBATActions.UnregisterCallbacks(IPlayerInputMap_COMBATActions)" />
        public void RemoveCallbacks(IPlayerInputMap_COMBATActions instance)
        {
            if (m_Wrapper.m_PlayerInputMap_COMBATActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PlayerInputMap_COMBATActions.AddCallbacks(IPlayerInputMap_COMBATActions)" />
        /// <seealso cref="PlayerInputMap_COMBATActions.RemoveCallbacks(IPlayerInputMap_COMBATActions)" />
        /// <seealso cref="PlayerInputMap_COMBATActions.UnregisterCallbacks(IPlayerInputMap_COMBATActions)" />
        public void SetCallbacks(IPlayerInputMap_COMBATActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputMap_COMBATActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputMap_COMBATActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PlayerInputMap_COMBATActions" /> instance referencing this action map.
    /// </summary>
    public PlayerInputMap_COMBATActions @PlayerInputMap_COMBAT => new PlayerInputMap_COMBATActions(this);

    // PlayerInputMap_ALCHEMY
    private readonly InputActionMap m_PlayerInputMap_ALCHEMY;
    private List<IPlayerInputMap_ALCHEMYActions> m_PlayerInputMap_ALCHEMYActionsCallbackInterfaces = new List<IPlayerInputMap_ALCHEMYActions>();
    /// <summary>
    /// Provides access to input actions defined in input action map "PlayerInputMap_ALCHEMY".
    /// </summary>
    public struct PlayerInputMap_ALCHEMYActions
    {
        private @PlayerInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PlayerInputMap_ALCHEMYActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputMap_ALCHEMY; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PlayerInputMap_ALCHEMYActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PlayerInputMap_ALCHEMYActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PlayerInputMap_ALCHEMYActions" />
        public void AddCallbacks(IPlayerInputMap_ALCHEMYActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputMap_ALCHEMYActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputMap_ALCHEMYActionsCallbackInterfaces.Add(instance);
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PlayerInputMap_ALCHEMYActions" />
        private void UnregisterCallbacks(IPlayerInputMap_ALCHEMYActions instance)
        {
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerInputMap_ALCHEMYActions.UnregisterCallbacks(IPlayerInputMap_ALCHEMYActions)" />.
        /// </summary>
        /// <seealso cref="PlayerInputMap_ALCHEMYActions.UnregisterCallbacks(IPlayerInputMap_ALCHEMYActions)" />
        public void RemoveCallbacks(IPlayerInputMap_ALCHEMYActions instance)
        {
            if (m_Wrapper.m_PlayerInputMap_ALCHEMYActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PlayerInputMap_ALCHEMYActions.AddCallbacks(IPlayerInputMap_ALCHEMYActions)" />
        /// <seealso cref="PlayerInputMap_ALCHEMYActions.RemoveCallbacks(IPlayerInputMap_ALCHEMYActions)" />
        /// <seealso cref="PlayerInputMap_ALCHEMYActions.UnregisterCallbacks(IPlayerInputMap_ALCHEMYActions)" />
        public void SetCallbacks(IPlayerInputMap_ALCHEMYActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputMap_ALCHEMYActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputMap_ALCHEMYActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PlayerInputMap_ALCHEMYActions" /> instance referencing this action map.
    /// </summary>
    public PlayerInputMap_ALCHEMYActions @PlayerInputMap_ALCHEMY => new PlayerInputMap_ALCHEMYActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "PlayerInputMap_EXPLORATION" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PlayerInputMap_EXPLORATIONActions.AddCallbacks(IPlayerInputMap_EXPLORATIONActions)" />
    /// <seealso cref="PlayerInputMap_EXPLORATIONActions.RemoveCallbacks(IPlayerInputMap_EXPLORATIONActions)" />
    public interface IPlayerInputMap_EXPLORATIONActions
    {
        /// <summary>
        /// Method invoked when associated input action "MovementInput" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMovementInput(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MenuInput" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMenuInput(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Interact" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInteract(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "InteractSwitch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInteractSwitch(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "PlayerInputMap_COMBAT" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PlayerInputMap_COMBATActions.AddCallbacks(IPlayerInputMap_COMBATActions)" />
    /// <seealso cref="PlayerInputMap_COMBATActions.RemoveCallbacks(IPlayerInputMap_COMBATActions)" />
    public interface IPlayerInputMap_COMBATActions
    {
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "PlayerInputMap_ALCHEMY" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PlayerInputMap_ALCHEMYActions.AddCallbacks(IPlayerInputMap_ALCHEMYActions)" />
    /// <seealso cref="PlayerInputMap_ALCHEMYActions.RemoveCallbacks(IPlayerInputMap_ALCHEMYActions)" />
    public interface IPlayerInputMap_ALCHEMYActions
    {
    }
}
